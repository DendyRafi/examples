type AccessRights = variant { Read; ReadWrite; ReadWriteManage };
type EncryptedPassword = record {
  encrypted_text : text;
  owner_vault_id : nat;
  password_id : nat;
  password_version : nat;
};
service : {
  add_user : (nat, text, AccessRights) -> ();
  create_password : (nat) -> (nat);
  create_vault : () -> (nat);
  delete_password : (nat) -> ();
  delete_vault : (nat) -> ();
  encrypted_symmetric_key_for_vault : (nat, blob) -> (nat, text, blob);
  get_accessible_vault_ids : () -> (vec nat);
  get_password : (nat) -> (EncryptedPassword);
  get_vault : (nat) -> (nat, vec EncryptedPassword);
  next_encrypted_symmetric_key_for_locked_vault : (nat, blob) -> (nat, text, blob);
  reencrypt_vault : (nat, nat, vec text) -> ();
  remove_user : (nat, text) -> ();
  rotate_vault_key : (nat) -> ();
  update_password : (nat, nat, text) -> ();
  verification_key_for_password_manager : () -> (text);
  whoami : () -> (text);
};
